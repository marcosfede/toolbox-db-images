name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]
  schedule:
    # Run weekly to check for security updates
    - cron: '0 2 * * 1'

env:
  REGISTRY: docker.io
  NAMESPACE: ${{ secrets.DOCKER_USERNAME || 'mcp-database-servers' }}
  PLATFORMS: linux/amd64,linux/arm64

jobs:
  # Validate setup and run basic checks
  validate:
    name: Validate Setup
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Validate project setup
        run: |
          chmod +x scripts/validate_setup.sh
          ./scripts/validate_setup.sh

      - name: Check Dockerfile syntax
        run: |
          for dockerfile in Dockerfile.*; do
            echo "Checking $dockerfile..."
            docker run --rm -i hadolint/hadolint < "$dockerfile" || echo "Warning: $dockerfile has linting issues"
          done

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: validate
    strategy:
      matrix:
        database: [postgres, mysql, snowflake, redshift, bigquery, alloydb, spanner, neo4j, sqlite, redis, sqlserver, firestore, supabase]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Build image for scanning
        run: |
          docker build -f Dockerfile.${{ matrix.database }} -t mcp-${{ matrix.database }}:scan .

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: 'mcp-${{ matrix.database }}:scan'
          format: 'sarif'
          output: 'trivy-results-${{ matrix.database }}.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        if: always()
        with:
          sarif_file: 'trivy-results-${{ matrix.database }}.sarif'

  # Unit and integration tests
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    needs: validate
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: testdb
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      mysql:
        image: mysql:8.0
        env:
          MYSQL_ROOT_PASSWORD: mysql
          MYSQL_DATABASE: testdb
        options: >-
          --health-cmd="mysqladmin ping"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=3
        ports:
          - 3306:3306

      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          cd tests
          pip install -r requirements.txt

      - name: Build test images
        run: |
          # Build lightweight images for testing
          docker build -f Dockerfile.postgres -t mcp-postgres:test .
          docker build -f Dockerfile.mysql -t mcp-mysql:test .
          docker build -f Dockerfile.redis -t mcp-redis:test .

      - name: Run basic setup tests
        run: |
          cd tests
          python -m pytest test_basic_setup.py -v

      - name: Run health check tests
        run: |
          cd tests
          # Start MCP servers in background for testing
          docker run -d --name mcp-postgres-test \
            -p 5000:5000 \
            -e DB_TYPE=postgres \
            -e DB_HOST=localhost \
            -e DB_PORT=5432 \
            -e DB_NAME=testdb \
            -e DB_USER=postgres \
            -e DB_PASSWORD=postgres \
            --network host \
            mcp-postgres:test

          # Wait for services to be ready
          sleep 30

          # Run health check tests
          python -m pytest test_health_checks.py::TestHealthChecks::test_postgres_health -v

          # Cleanup
          docker stop mcp-postgres-test || true
          docker rm mcp-postgres-test || true

  # Build and push Docker images
  build-and-push:
    name: Build & Push
    runs-on: ubuntu-latest
    needs: [validate, security-scan, test]
    if: github.event_name != 'pull_request'
    strategy:
      fail-fast: false
      matrix:
        database: [postgres, mysql, snowflake, redshift, bigquery, alloydb, spanner, neo4j, sqlite, redis, sqlserver, firestore, supabase]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        if: github.event_name != 'pull_request'
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
            type=sha,prefix={{branch}}-

      - name: Build and push
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.database }}
          platforms: ${{ env.PLATFORMS }}
          push: ${{ github.event_name != 'pull_request' }}
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TOOLBOX_VERSION=0.9.0

  # Create multi-arch manifest and update documentation
  post-build:
    name: Post-Build Tasks
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Update Docker Hub descriptions
        run: |
          # Update repository descriptions with README content
          databases=(postgres mysql snowflake redshift bigquery alloydb spanner neo4j sqlite redis sqlserver firestore supabase)
          
          for db in "${databases[@]}"; do
            echo "Updating description for mcp-$db..."
            # This would typically use docker hub API to update descriptions
            # For now, we'll just log the action
            echo "Would update description for ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-$db"
          done

      - name: Generate build report
        run: |
          echo "# Build Report" > build-report.md
          echo "Built on: $(date)" >> build-report.md
          echo "Commit: ${{ github.sha }}" >> build-report.md
          echo "Branch: ${{ github.ref_name }}" >> build-report.md
          echo "" >> build-report.md
          echo "## Images Built:" >> build-report.md
          
          databases=(postgres mysql snowflake redshift bigquery alloydb spanner neo4j sqlite redis sqlserver firestore supabase)
          for db in "${databases[@]}"; do
            echo "- ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-$db:latest" >> build-report.md
          done

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-report
          path: build-report.md

  # Integration tests across multiple databases
  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-and-push
    if: github.event_name != 'pull_request' && github.ref == 'refs/heads/main'
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install test dependencies
        run: |
          cd tests
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          cd tests
          python -m pytest test_integration.py -v -m "not slow"

  # Notify on success/failure
  notify:
    name: Notify
    runs-on: ubuntu-latest
    needs: [validate, security-scan, test, build-and-push, integration-test]
    if: always()
    steps:
      - name: Notify success
        if: ${{ needs.build-and-push.result == 'success' }}
        run: |
          echo "✅ CI/CD Pipeline completed successfully!"
          echo "All 13 database images have been built and pushed."

      - name: Notify failure
        if: ${{ needs.build-and-push.result == 'failure' || needs.test.result == 'failure' }}
        run: |
          echo "❌ CI/CD Pipeline failed!"
          echo "Please check the logs for details."
          exit 1