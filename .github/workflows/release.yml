name: Release

on:
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as pre-release'
        required: false
        type: boolean
        default: false

env:
  REGISTRY: docker.io
  NAMESPACE: ${{ secrets.DOCKER_USERNAME || 'mcp-database-servers' }}

jobs:
  # Validate version and prepare release
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      tag: ${{ steps.version.outputs.tag }}
      is_prerelease: ${{ inputs.prerelease }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Validate version format
        id: version
        run: |
          version="${{ inputs.version }}"
          
          # Remove 'v' prefix if present for internal use
          clean_version=${version#v}
          
          # Validate semantic versioning format
          if [[ ! $clean_version =~ ^[0-9]+\.[0-9]+\.[0-9]+(-[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?(\+[0-9A-Za-z-]+(\.[0-9A-Za-z-]+)*)?$ ]]; then
            echo "Error: Invalid version format. Please use semantic versioning (e.g., 1.0.0)"
            exit 1
          fi
          
          # Ensure tag starts with 'v'
          if [[ $version != v* ]]; then
            version="v$version"
          fi
          
          echo "version=$clean_version" >> $GITHUB_OUTPUT
          echo "tag=$version" >> $GITHUB_OUTPUT
          
          echo "Prepared release version: $version"

      - name: Check if tag already exists
        run: |
          if git tag -l | grep -q "^${{ steps.version.outputs.tag }}$"; then
            echo "Error: Tag ${{ steps.version.outputs.tag }} already exists"
            exit 1
          fi

  # Build all database images with release tags
  build-release:
    name: Build Release Images
    runs-on: ubuntu-latest
    needs: prepare-release
    strategy:
      fail-fast: false
      matrix:
        database: [postgres, mysql, snowflake, redshift, bigquery, alloydb, spanner, neo4j, sqlite, redis, sqlserver, firestore, supabase]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push release image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.${{ matrix.database }}
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}:${{ needs.prepare-release.outputs.version }}
            ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}:latest
          labels: |
            org.opencontainers.image.title=MCP ${{ matrix.database }} Server
            org.opencontainers.image.description=Model Context Protocol server for ${{ matrix.database }}
            org.opencontainers.image.version=${{ needs.prepare-release.outputs.version }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.created=${{ github.event.head_commit.timestamp }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            TOOLBOX_VERSION=0.9.0

  # Generate release notes and create GitHub release
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate release notes
        id: release_notes
        run: |
          # Get the latest tag (previous release)
          PREVIOUS_TAG=$(git describe --tags --abbrev=0 HEAD^ 2>/dev/null || echo "")
          
          # Generate changelog
          echo "# MCP Database Servers ${{ needs.prepare-release.outputs.tag }}" > release_notes.md
          echo "" >> release_notes.md
          
          if [ -n "$PREVIOUS_TAG" ]; then
            echo "## Changes since $PREVIOUS_TAG" >> release_notes.md
            echo "" >> release_notes.md
            
            # Get commits since last tag
            git log --pretty=format:"- %s (%h)" $PREVIOUS_TAG..HEAD >> release_notes.md
          else
            echo "## Initial Release" >> release_notes.md
            echo "" >> release_notes.md
            echo "This is the initial release of MCP Database Servers with support for 13 major database systems." >> release_notes.md
          fi
          
          echo "" >> release_notes.md
          echo "## ðŸš€ Docker Images" >> release_notes.md
          echo "" >> release_notes.md
          echo "All images are available with tag \`${{ needs.prepare-release.outputs.version }}\` and \`latest\`:" >> release_notes.md
          echo "" >> release_notes.md
          
          databases=(postgres mysql snowflake redshift bigquery alloydb spanner neo4j sqlite redis sqlserver firestore supabase)
          for db in "${databases[@]}"; do
            echo "- \`${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-$db:${{ needs.prepare-release.outputs.version }}\`" >> release_notes.md
          done
          
          echo "" >> release_notes.md
          echo "## ðŸ“‹ Supported Databases" >> release_notes.md
          echo "" >> release_notes.md
          echo "This release supports **13 major database systems**:" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Relational Databases" >> release_notes.md
          echo "- PostgreSQL - Full SQL, Extensions, Arrays, JSON" >> release_notes.md
          echo "- MySQL - Full SQL, Full-Text Search, JSON" >> release_notes.md
          echo "- Microsoft SQL Server - T-SQL, Procedures, Functions" >> release_notes.md
          echo "- SQLite - Embedded DB, File-based" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Cloud Analytics Platforms" >> release_notes.md
          echo "- Google BigQuery - Serverless Analytics, ML" >> release_notes.md
          echo "- Snowflake - Data Warehouse, Time Travel" >> release_notes.md
          echo "- Amazon Redshift - Data Warehouse, Columnar" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Google Cloud Platform" >> release_notes.md
          echo "- Google AlloyDB - PostgreSQL-compatible, AI" >> release_notes.md
          echo "- Google Cloud Spanner - Global Distribution, ACID" >> release_notes.md
          echo "- Google Firestore - NoSQL Document DB" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Graph & NoSQL" >> release_notes.md
          echo "- Neo4j - Graph DB, Cypher Queries" >> release_notes.md
          echo "- Redis - Key-Value, Caching, Pub/Sub" >> release_notes.md
          echo "" >> release_notes.md
          echo "### Developer Platforms" >> release_notes.md
          echo "- Supabase - PostgreSQL + APIs, Real-time" >> release_notes.md
          echo "" >> release_notes.md
          echo "## ðŸ”§ Installation" >> release_notes.md
          echo "" >> release_notes.md
          echo "\`\`\`bash" >> release_notes.md
          echo "# Pull any database image" >> release_notes.md
          echo "docker pull ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-postgres:${{ needs.prepare-release.outputs.version }}" >> release_notes.md
          echo "" >> release_notes.md
          echo "# Run with your database credentials" >> release_notes.md
          echo "docker run -d -p 5000:5000 \\" >> release_notes.md
          echo "  -e DB_HOST=your-db-host \\" >> release_notes.md
          echo "  -e DB_USER=your-username \\" >> release_notes.md
          echo "  -e DB_PASSWORD=your-password \\" >> release_notes.md
          echo "  -e DB_NAME=your-database \\" >> release_notes.md
          echo "  ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-postgres:${{ needs.prepare-release.outputs.version }}" >> release_notes.md
          echo "\`\`\`" >> release_notes.md
          
          # Set output for release creation
          echo "notes_file=release_notes.md" >> $GITHUB_OUTPUT

      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          git tag -a ${{ needs.prepare-release.outputs.tag }} -m "Release ${{ needs.prepare-release.outputs.tag }}"
          git push origin ${{ needs.prepare-release.outputs.tag }}

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ needs.prepare-release.outputs.tag }}
          name: "MCP Database Servers ${{ needs.prepare-release.outputs.tag }}"
          bodyFile: ${{ steps.release_notes.outputs.notes_file }}
          prerelease: ${{ needs.prepare-release.outputs.is_prerelease }}
          draft: false
          token: ${{ secrets.GITHUB_TOKEN }}

  # Post-release tasks
  post-release:
    name: Post-Release Tasks
    runs-on: ubuntu-latest
    needs: [prepare-release, create-release]
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Update latest branch (for documentation)
        if: ${{ !inputs.prerelease }}
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"
          
          # Update or create latest-release branch
          git checkout -B latest-release
          git push origin latest-release --force

      - name: Notify success
        run: |
          echo "ðŸŽ‰ Release ${{ needs.prepare-release.outputs.tag }} completed successfully!"
          echo ""
          echo "ðŸ“¦ Published Docker images:"
          databases=(postgres mysql snowflake redshift bigquery alloydb spanner neo4j sqlite redis sqlserver firestore supabase)
          for db in "${databases[@]}"; do
            echo "  - ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-$db:${{ needs.prepare-release.outputs.version }}"
          done
          echo ""
          echo "ðŸ”— GitHub Release: https://github.com/${{ github.repository }}/releases/tag/${{ needs.prepare-release.outputs.tag }}"