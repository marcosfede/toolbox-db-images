name: Build and Push Docker Images

on:
  push:
    branches: [ main, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      push_images:
        description: 'Push images to registry'
        required: true
        default: false
        type: boolean

env:
  REGISTRY: docker.io
  NAMESPACE: ${{ secrets.DOCKERHUB_USERNAME || github.repository_owner }}

jobs:
  # Job to build and test all images
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        database: [postgres, mysql, snowflake, redshift]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      with:
        platforms: linux/amd64,linux/arm64
    
    - name: Log in to Docker Hub
      if: github.event_name != 'pull_request' || github.event.inputs.push_images == 'true'
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}
    
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=semver,pattern={{version}}
          type=semver,pattern={{major}}.{{minor}}
          type=semver,pattern={{major}}
          type=raw,value=latest,enable={{is_default_branch}}
    
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        file: ./Dockerfile.${{ matrix.database }}
        platforms: linux/amd64,linux/arm64
        push: ${{ github.event_name != 'pull_request' || github.event.inputs.push_images == 'true' }}
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max
        build-args: |
          TOOLBOX_VERSION=0.9.0
    
    - name: Test image
      if: matrix.database == 'postgres'
      run: |
        docker run --rm ${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}:latest --version || true

  # Security scan
  security-scan:
    runs-on: ubuntu-latest
    needs: build
    if: github.event_name != 'pull_request'
    strategy:
      matrix:
        database: [postgres, mysql, snowflake, redshift]
    
    steps:
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        image-ref: '${{ env.REGISTRY }}/${{ env.NAMESPACE }}/mcp-${{ matrix.database }}:latest'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'